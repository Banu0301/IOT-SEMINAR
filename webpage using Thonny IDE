
 display temperature sensor data on a webpage using Thonny IDE


import network
import socket
import dht
import machine
import time
import gc

# Set up garbage collection to manage memory
gc.collect()

# Configure your ESP32 Wi-Fi settings
ssid = 'Infinix NOTE 30 5G'
password = '6pecubnv6e4gi2i'

# Connect to Wi-Fi
def connect_to_wifi():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    if not wlan.isconnected():
        print('Connecting to WiFi...')
        wlan.connect(ssid, password)
        while not wlan.isconnected():
            pass
    print('Connected to WiFi')
    print(wlan.ifconfig())  # Show the IP, subnet, and gateway

# DHT11 sensor setup
dht_pin = machine.Pin(4)  # Use your GPIO pin number here
sensor = dht.DHT11(dht_pin)

# Web page to display temperature
def web_page(temp, hum):
    html = """<html>
                <head>
                    <title>Temperature Sensor</title>
                    <meta http-equiv="refresh" content="5">
                </head>
                <body>
                    <h1>ESP32 Temperature and Humidity</h1>
                    <p>Temperature: <strong>{0}Â°C</strong></p>
                    <p>Humidity: <strong>{1}%</strong></p>
                </body>
              </html>""".format(temp, hum)
    return html

# Create a socket server
def start_web_server():
    addr = socket.getaddrinfo('0.0.0.0', 80)[0][-1]
    s = socket.socket()
    s.bind(addr)
    s.listen(1)
    print('Listening on', addr)

    while True:
        try:
            # Wait for a client to connect
            conn, addr = s.accept()
            print('Client connected from', addr)
            request = conn.recv(1024)

            # Read sensor data
            try:
                sensor.measure()
                temp = sensor.temperature()
                hum = sensor.humidity()
            except OSError as e:
                print('Failed to read sensor:', e)
                temp = "N/A"
                hum = "N/A"

            # Send HTTP response
            response = web_page(temp, hum)
            conn.send('HTTP/1.1 200 OK\r\n')
            conn.send('Content-Type: text/html\r\n')
            conn.send('Connection: close\r\n\r\n')
            conn.sendall(response)
            conn.close()

            # Add a small delay to avoid brownout issues
            time.sleep(2)

        except OSError as e:
            conn.close()
            print('Connection closed due to error:', e)

# Main function to start the program
def main():
    connect_to_wifi()
    start_web_server()

# Run the main function
if __name__ == '__main__':
    main()


